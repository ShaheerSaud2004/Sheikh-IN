generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  password          String
  userType          UserType
  timezone          String?          @default("UTC")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  followers         Follow[]         @relation("Following")
  following         Follow[]         @relation("Followers")
  receivedMessages  Message[]        @relation("ReceivedMessages")
  messages          Message[]        @relation("SentMessages")
  posts             Post[]
  profile           Profile?
  receivedProposals Proposal[]       @relation("ReceivedProposals")
  proposals         Proposal[]       @relation("UserProposals")
  calendarEvents    CalendarEvent[]
  sheikhBookings    Booking[]        @relation("SheikhBookings")
  clientBookings    Booking[]        @relation("ClientBookings")
  content           Content[]
  notifications     Notification[]
  analytics         Analytics[]
}

model Profile {
  id               String            @id @default(cuid())
  userId           String            @unique
  name             String
  bio              String?
  profileImage     String?
  coverImage       String?
  location         String?
  phone            String?
  website          String?
  professionalType ProfessionalType?
  madhhab          Madhhab?
  languages        String?
  specialties      String?
  travelRadius     Int?
  isAvailable      Boolean           @default(true)
  hourlyRate       Float?
  isHafiz          Boolean           @default(false)
  hasIjazah        Boolean           @default(false)
  ijazahDetails    String?
  seminary         String?
  yearsExperience  Int?
  certifications   String?
  organizationName String?
  organizationType String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  credentials      Credential[]
  endorsements     Endorsement[]
  experiences      Experience[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos           Video[]
}

model Credential {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  institution String
  year        String
  description String?
  documentUrl String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Experience {
  id           String   @id @default(cuid())
  profileId    String
  title        String
  organization String
  location     String?
  startDate    String
  endDate      String?
  isCurrent    Boolean  @default(false)
  description  String?
  createdAt    DateTime @default(now())
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Video {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  url         String
  description String?
  videoType   String
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Post {
  id           String       @id @default(cuid())
  userId       String
  content      String
  image        String?
  postType     String
  serviceType  ServiceType?
  location     String?
  date         DateTime?
  compensation String?
  requirements String?
  likes        Int          @default(0)
  views        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Proposal {
  id          String      @id @default(cuid())
  fromUserId  String
  toUserId    String
  serviceType ServiceType
  eventDate   DateTime
  location    String
  description String
  budget      String?
  status      String      @default("pending")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  toUser      User        @relation("ReceivedProposals", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser    User        @relation("UserProposals", fields: [fromUserId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Message {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  toUser     User     @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser   User     @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id            String   @id @default(cuid())
  profileId     String
  endorserName  String
  endorserTitle String?
  content       String
  qualities     String?
  createdAt     DateTime @default(now())
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum UserType {
  PROFESSIONAL
  SEEKER
  ORGANIZATION
}

enum ProfessionalType {
  SHEIKH
  MUFTI
  QARI
  KHATEEB
  IMAM
  SCHOLAR
}

enum Madhhab {
  HANAFI
  SHAFII
  MALIKI
  HANBALI
  OTHER
}

enum ServiceType {
  NIKAH
  KHUTBAH
  JANAZAH
  COUNSELING
  TEACHING
  YOUTH_PROGRAM
  RAMADAN_PROGRAM
  TAJWEED
  HIFZ
  AQEEDAH
  FIQH
  HADITH
  TAFSEER
  OTHER
}

model CalendarEvent {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  eventType   EventType
  serviceType ServiceType?
  location    String?
  isRecurring Boolean     @default(false)
  recurrence  String?     // JSON string for recurrence rules
  isBooked    Boolean     @default(false)
  bookedBy    String?     // User ID who booked this slot
  meetingUrl  String?     // For video calls
  status      EventStatus @default(AVAILABLE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]
}

model Booking {
  id          String        @id @default(cuid())
  sheikhId    String
  clientId    String
  eventId     String
  serviceType ServiceType
  startTime   DateTime
  endTime     DateTime
  location    String?
  description String?
  status      BookingStatus @default(PENDING)
  meetingUrl  String?
  notes       String?
  price       Float?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sheikh      User          @relation("SheikhBookings", fields: [sheikhId], references: [id], onDelete: Cascade)
  client      User          @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  event       CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Content {
  id          String      @id @default(cuid())
  authorId    String
  title       String
  description String
  content     String      // For articles
  videoUrl    String?     // For videos
  audioUrl    String?     // For podcasts
  thumbnail   String?
  category    ContentCategory
  tags        String?     // JSON array of tags
  isPublic    Boolean     @default(true)
  isLive      Boolean     @default(false) // For live streaming
  liveUrl     String?     // Stream URL
  views       Int         @default(0)
  likes       Int         @default(0)
  duration    Int?        // Duration in seconds for videos/audio
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  data      String?          // JSON data for additional info
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime
  bookings        Int      @default(0)
  revenue         Float    @default(0)
  profileViews    Int      @default(0)
  messagesSent    Int      @default(0)
  proposalsSent   Int      @default(0)
  proposalsReceived Int    @default(0)
  contentViews    Int      @default(0)
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EventType {
  AVAILABILITY
  BOOKING
  BREAK
  PERSONAL
}

enum EventStatus {
  AVAILABLE
  BOOKED
  CANCELLED
  COMPLETED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ContentCategory {
  ARTICLE
  VIDEO
  PODCAST
  LIVESTREAM
  KHUTBAH
  LESSON
  REMINDER
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  MESSAGE
  PROPOSAL
  CONTENT_LIKE
  FOLLOW
  SYSTEM
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  location  String?
  interest  String?  // What they're interested in (nikah, teaching, etc.)
  message   String?  // Additional message
  status    String   @default("pending") // pending, approved, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
