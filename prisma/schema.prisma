generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  password          String
  userType          UserType
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  followers         Follow[]   @relation("Following")
  following         Follow[]   @relation("Followers")
  receivedMessages  Message[]  @relation("ReceivedMessages")
  messages          Message[]  @relation("SentMessages")
  posts             Post[]
  profile           Profile?
  receivedProposals Proposal[] @relation("ReceivedProposals")
  proposals         Proposal[] @relation("UserProposals")
}

model Profile {
  id               String            @id @default(cuid())
  userId           String            @unique
  name             String
  bio              String?
  profileImage     String?
  coverImage       String?
  location         String?
  phone            String?
  website          String?
  professionalType ProfessionalType?
  madhhab          Madhhab?
  languages        String?
  specialties      String?
  travelRadius     Int?
  isAvailable      Boolean           @default(true)
  hourlyRate       Float?
  isHafiz          Boolean           @default(false)
  hasIjazah        Boolean           @default(false)
  ijazahDetails    String?
  seminary         String?
  yearsExperience  Int?
  certifications   String?
  organizationName String?
  organizationType String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  credentials      Credential[]
  endorsements     Endorsement[]
  experiences      Experience[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos           Video[]
}

model Credential {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  institution String
  year        String
  description String?
  documentUrl String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Experience {
  id           String   @id @default(cuid())
  profileId    String
  title        String
  organization String
  location     String?
  startDate    String
  endDate      String?
  isCurrent    Boolean  @default(false)
  description  String?
  createdAt    DateTime @default(now())
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Video {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  url         String
  description String?
  videoType   String
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Post {
  id           String       @id @default(cuid())
  userId       String
  content      String
  image        String?
  postType     String
  serviceType  ServiceType?
  location     String?
  date         DateTime?
  compensation String?
  requirements String?
  likes        Int          @default(0)
  views        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Proposal {
  id          String      @id @default(cuid())
  fromUserId  String
  toUserId    String
  serviceType ServiceType
  eventDate   DateTime
  location    String
  description String
  budget      String?
  status      String      @default("pending")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  toUser      User        @relation("ReceivedProposals", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser    User        @relation("UserProposals", fields: [fromUserId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Message {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  toUser     User     @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser   User     @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id            String   @id @default(cuid())
  profileId     String
  endorserName  String
  endorserTitle String?
  content       String
  qualities     String?
  createdAt     DateTime @default(now())
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum UserType {
  PROFESSIONAL
  SEEKER
  ORGANIZATION
}

enum ProfessionalType {
  SHEIKH
  MUFTI
  QARI
  KHATEEB
  IMAM
  SCHOLAR
}

enum Madhhab {
  HANAFI
  SHAFII
  MALIKI
  HANBALI
  OTHER
}

enum ServiceType {
  NIKAH
  KHUTBAH
  JANAZAH
  COUNSELING
  TEACHING
  YOUTH_PROGRAM
  RAMADAN_PROGRAM
  TAJWEED
  HIFZ
  AQEEDAH
  FIQH
  HADITH
  TAFSEER
  OTHER
}
